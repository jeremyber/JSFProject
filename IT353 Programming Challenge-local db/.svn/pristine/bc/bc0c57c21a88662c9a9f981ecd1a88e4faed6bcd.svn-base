package controller;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import DAO.ScheduleDAO;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Properties;
import javax.enterprise.context.SessionScoped;
import javax.inject.Named;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

/**
 *
 * @author it3530103
 */
@Named(value = "times")
@SessionScoped
public class ScheduleController implements Serializable{

    private String presentAvailableTimes = "";
    private String timeSelected="";
    private String groupName="";
    ArrayList<Boolean> availableTimes = new ArrayList<Boolean>();
    private String errorCode="";
    
    public ScheduleController() 
    {
        availableTimes = ScheduleDAO.findAvailableTimes();
       presentTimes();
    }
    
    public void presentTimes()
    {
        presentAvailableTimes="";
   
                if(availableTimes.get(0)==true)
                  presentAvailableTimes+="1) 9:00 to 9:30 a.m.<br/>";
                if(availableTimes.get(1)==true)
                  presentAvailableTimes+="2) 9:30 to 10:00 a.m.<br/>";
                if(availableTimes.get(2)==true)
                  presentAvailableTimes+="3) 10:00 to 10:30 a.m.<br/>";
                if(availableTimes.get(3)==true)
                  presentAvailableTimes+="4) 11:00 to 11:30 a.m.<br/>";
                if(availableTimes.get(4)==true)
                  presentAvailableTimes+="5) 11:30 to 12:00 p.m.<br/>";
                if(availableTimes.get(5)==true)
                  presentAvailableTimes+="6) 12:00 to 12:30 p.m.<br/>";
                if(availableTimes.get(6)==true)
                  presentAvailableTimes+="7) 12:30 to 1:00 p.m.<br/>";
                if(availableTimes.get(7)== true)
                  presentAvailableTimes+="8) 1:00 to 1:30 p.m.<br/>";
                if(availableTimes.get(8)==true)
                  presentAvailableTimes+="9) 1:30 to 2:00 p.m.<br/>";
                if(availableTimes.get(9)==true)
                  presentAvailableTimes+="10) 2:00 to 2:30 p.m.<br/>";
                if(availableTimes.get(10)==true)
                  presentAvailableTimes+="11) 2:30 to 3:00 p.m.<br/>";
                if(availableTimes.get(11)==true)
                  presentAvailableTimes+="12) 3:00 to 3:30 p.m.<br/>";
                if(availableTimes.get(12)==true)
                  presentAvailableTimes+="13) 3:30 to 4:00 p.m.<br/>";
                if(availableTimes.get(13)==true)
                  presentAvailableTimes+="14) 4:00 to 4:30 p.m.<br/>";
                if(availableTimes.get(14)==true)
                  presentAvailableTimes+="15) 4:30 to 5:00 p.m.<br/>";
                          
                    
    }

    public String removeTimes()
    {
        
        setErrorCode("");
        int selected=-1;
        try
        {
             selected = Integer.parseInt(timeSelected) - 1;
        }
        catch(NumberFormatException e)
        {
            setErrorCode("That is not a number!");
            return "scheduleappointment?faces-redirect=true";
        }
                
                
        if(selected<0 || selected > availableTimes.size())
            setErrorCode("That time is not available!");
        else if(availableTimes.get(selected).booleanValue() == true)
        {
            String timeToRemove = "";
             if(selected==0)
                 timeToRemove = "9:00 to 9:30 a.m.";
             else if(selected==1)
                 timeToRemove = "9:30 to 10:00 a.m.";
             else if(selected==2)
                 timeToRemove = "10:00 to 10:30 a.m.";
             else if(selected==3)
                 timeToRemove = "10:30 to 11:00 a.m.";
             else if(selected==4)
                 timeToRemove = "11:00 to 11:30 a.m.";
             else if(selected==5)
                 timeToRemove = "11:30 to 12:00 p.m.";
             else if(selected==6)
                 timeToRemove = "12:00 to 12:30 p.m.";
             else if(selected==7)
                 timeToRemove = "12:30 to 1:00 p.m.";
             else if(selected==8)
                 timeToRemove = "1:00 to 1:30 p.m.";
             else if(selected==9)
                 timeToRemove = "1:30 to 2:00 p.m.";
             else if(selected==10)
                 timeToRemove = "2:00 to 2:30 p.m.";
             else if(selected==11)
                 timeToRemove = "2:30 to 3:00 p.m.";
             else if(selected==12)
                 timeToRemove = "3:00 to 3:30 p.m.";
              else if(selected==13)
                 timeToRemove = "3:30 to 4:00 p.m.";
             else if(selected==14)
                 timeToRemove = "4:00 to 4:30 p.m.";
             else
                 timeToRemove = "4:30 to 5:00 p.m.";
             if(this.sendEmail())
                ScheduleDAO.removeTime(timeToRemove, groupName);
                 
             
             //send e-mail
           
             
         
             
        }
           
        else
         setErrorCode("That time is not available!");
        availableTimes = ScheduleDAO.findAvailableTimes();
        presentTimes();
       return "scheduleappointment?faces-redirect=true";
            
    }
    
    public String getPresentAvailableTimes() {
        return presentAvailableTimes;
    }

    public void setPresentAvailableTimes(String presentAvailableTimes) {
        this.presentAvailableTimes = presentAvailableTimes;
    }

   

    public String getTimeSelected() {
        return timeSelected;
    }

    public void setTimeSelected(String timeSelected) {
        this.timeSelected = timeSelected;
    }

    public String getGroupName() {
        return groupName;
    }

    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }

    public String getErrorCode() {
        return errorCode;
    }

    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }
    
    private String getAppointmentTime()
    {
        int selected = Integer.parseInt(this.getTimeSelected());
        String appointmentTime = "";
         if(selected==0)
                 appointmentTime = "9:00 to 9:30 a.m.";
             else if(selected==1)
                 appointmentTime = "9:30 to 10:00 a.m.";
             else if(selected==2)
                 appointmentTime = "10:00 to 10:30 a.m.";
             else if(selected==3)
                 appointmentTime = "10:30 to 11:00 a.m.";
             else if(selected==4)
                 appointmentTime = "11:00 to 11:30 a.m.";
             else if(selected==5)
                 appointmentTime = "11:30 to 12:00 p.m.";
             else if(selected==6)
                 appointmentTime = "12:00 to 12:30 p.m.";
             else if(selected==7)
                 appointmentTime = "12:30 to 1:00 p.m.";
             else if(selected==8)
                 appointmentTime = "1:00 to 1:30 p.m.";
             else if(selected==9)
                 appointmentTime = "1:30 to 2:00 p.m.";
             else if(selected==10)
                 appointmentTime = "2:00 to 2:30 p.m.";
             else if(selected==11)
                 appointmentTime = "2:30 to 3:00 p.m.";
             else if(selected==12)
                 appointmentTime = "3:00 to 3:30 p.m.";
              else if(selected==13)
                 appointmentTime = "3:30 to 4:00 p.m.";
             else if(selected==14)
                 appointmentTime = "4:00 to 4:30 p.m.";
             else
                 appointmentTime = "4:30 to 5:00 p.m.";
         
         return appointmentTime;
    }
    
    private String validateEmail(){
        String email = this.getGroupName();
        int last_index = email.length() - 1;
        int at_pos = -1;
        boolean at_seen = false;
        boolean dot_seen = false;

        //see if only one @
        for(int j = 0; j < email.length(); j++)
        {	
            if(email.charAt(j) == '@')
            {			
                if((j != 0 && j != last_index) && at_seen == false)
                {
                    at_pos = j; 
                    at_seen = true; //encountered an @
                }
                else
                {
                    if(j == 0 || j == last_index)
                        return("Email Error: @ cannot appear at beginning or end of email-address");
                    else
                        return("Email Error: @ cannot appear more than once in an email-address");
                }
            }
        }

        if(at_seen == false)	//no @ encountered		
                return ("Email Error: No @ found");

        //check for periods / position 
        for(int k = 0; k < email.length(); k++)
        {	
            if(email.charAt(k) == '.')
            {			
                if(k == 0 || k == last_index || k == (at_pos + 1))	//period at beginning, right after @, or end 
                {
                    return("Email Error: Period cannot appear at beginning, right after @, or end!");
                }
                if(k > (at_pos + 1))
                {
                    dot_seen = true; 
                }
            }
        }

        if(dot_seen == false)	//no . encountered	
            return("Email Error: No period found");

        return "";  //validation good
    }

    private boolean sendEmail()
    {
        
        //verify e-mail
       String emailError = this.validateEmail();
       if(!(emailError.equals("")))
       {
           this.setErrorCode(emailError);
           return false;
       }
       // Recipient's email ID needs to be mentioned.
        String to = this.getGroupName();
        

        // Sender's email ID needs to be mentioned
        String from = "jdber@ilstu.edu";

        // Assuming you are sending email from this host
        String host = "smtp.ilstu.edu";

        // Get system properties
        Properties properties = System.getProperties();

        // Setup mail server
        properties.setProperty("mail.smtp.host", host);
        properties.setProperty("mail.user", "bmsalm"); // if needed
        //properties.setProperty("mail.password", "omlette666"); // if needed

        // Get the default Session object.
        Session session = Session.getDefaultInstance(properties);

        try {
            // Create a default MimeMessage object.
            MimeMessage message = new MimeMessage(session);

            // Set From: header field of the header.
            message.setFrom(new InternetAddress(from));

            // Set To: header field of the header.
            message.addRecipient(Message.RecipientType.TO,
                    new InternetAddress(to));

            // Set Subject: header field
            message.setSubject("Your appointment with Agland Inc.");

            // Send the actual HTML message, as big as you like
            message.setContent("Thank you for scheduling an appointment!"
                    + "<br><br>We will see you from " + this.getAppointmentTime()
                    + "<br> Please do not be late. Thank you very much."
                    + "<br><br>Agland Illinois Services Inc.",
                    "text/html");

            // Send message
            Transport.send(message);
            System.out.println("Sent message successfully...."); 
            
        }catch (MessagingException e) {
            System.out.println("Error sending email: "+e.getMessage());
            this.setErrorCode("Appointment Scheduled! However, we are unable to send your welcome email at this time:<br>)"
                    + e.getMessage()
                    +":<br>");
            return false;
        } 
        
        this.setErrorCode("Appointment scheduled! Please check your e-mail for confirmation.");
        return true;
    }
}
